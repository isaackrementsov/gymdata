package com.webapps.gymdata.models;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.TypedQuery;

// JPA Entity for storing scan-in/out data (MySQL table: scans)
@Entity
@Table(name="scans")
public class Scan extends Model implements Serializable {
    
    // Required parameter for serialization version tracking
    private static final long serialVersionUId = 1L;
    
    // Automatically generated id
    @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    private Integer id;
    
    // Whether this scan was a scan-in (=true) or scan-out (=false)
    private Boolean scanIn;
    // Scan timestamp (stored as a JPA TIMESTAMP and SQL DATETIME)
    @Temporal(TemporalType.TIMESTAMP)
    private Date date;
    
    // Member responsible for this scan, linked by memberId join column
    @ManyToOne
    @JoinColumn(name="memberId")
    private Member member;
    
    // Getter and setter methods for class attributes
   
    // Id has no setter method because it is automatically generated by MySQL
    public Integer getId(){
        return id;
    }
    
    public Boolean getScanIn(){
        return scanIn;
    }
    
    public void setScanIn(Boolean scanIn){
        this.scanIn = scanIn;
    }
    
    public Member getMember(){
        return member;
    }
    
    public void setMember(Member member){
        this.member = member;
    }
    
    public Date getDate(){
        return date;
    }
    
    // Get the date in a "pretty" format (ex. 8:00am, February 8th 2021)
    public String getPrettyDate(){
        // Ending to time in 12-hour format
        String ending = "am";
        // Convert Date to LocalDateTime so that it can be worked with more easily
        LocalDateTime dateTime = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
        // Hour of this date
        int hours = dateTime.getHour();
        
        // Change to pm format if hour is greater than 12
        if(hours > 12){
            hours -= 12;
            ending = "pm";
        }
        
        // Month of this date
        String month = dateTime.getMonth().name();
        // Capitalize month in proper noun format
        month = month.charAt(0) + month.substring(1).toLowerCase();
        
        // Combine everything into a readable string
        return hours + ":00" + ending + ", " + month + " " + dateTime.getDayOfMonth() + " " + dateTime.getYear(); 
    }
    
    public void setDate(Date date){
        this.date = date;
    }
    
    // Get all scans in the database    
    public static List<Scan> getAll(){
        List<Scan> scans = (List<Scan>) execute((Connection connection) -> {
            // HQL query to select rows from the scan (entity Scan) table and sort in descending order by date
            String queryString = "select s from Scan s ORDER BY s.date DESC";
            // Turn string into actionable query
            TypedQuery<Scan> query = connection.em.createQuery(queryString, Scan.class);
            
            // Return all records found (this is passed to and returned by execute)
            return query.getResultList();
        });
        
        return scans;
    }
    
    // Default constructor (required by JPA)
    public Scan(){ }
    
    // Create scan by defining the member responsible and whether it's in or out; date defaults to current date
    public Scan(Boolean scanIn, Member member){
        this(new Date(), scanIn, member);
    }
    
    // Create scan by defining the member responsible, whether it's in or out, and the date it occured
    public Scan(Date date, Boolean scanIn, Member member){
        setScanIn(scanIn);
        setDate(date);
        setMember(member);
    }
    
    public static class DateComparator implements Comparator<Scan> {
        @Override
        public int compare(Scan scanA, Scan scanB){
            long dateA = scanA.getDate().getTime();
            long dateB = scanB.getDate().getTime();
            
            return dateA < dateB ? 1 : dateA == dateB ? 0 : -1;
        }
    }
    
}

package com.webapps.gymdata.models;

import java.io.Serializable;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.TypedQuery;

// JPA Entity for storing employee data (MySQL table: employees)
@Entity
@Table(name="employees")
public class Employee extends Model implements Serializable {
    
    // Required parameter for serialization version tracking
    private static long serialVersionUId = 1L;
    
    // Automatically generated id
    @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    private Integer id;
    
    // Employee name
    private String firstName;
    private String lastName;
    
    // Employee weekly schedule & wage
    private Integer hoursPerWeek;
    private Double wage;
    
    // Getter and setter methods for each attribute
    
    // Id has no setter method because it is automatically generated by MySQL
    public Integer getId(){
        return id;
    }
    
    // Add first and last name to get full
    public String getName(){
        return getFirstName() + " " + getLastName();
    }
    
    public String getFirstName(){
        return firstName;
    }
    
    public void setFirstName(String firstName){
        this.firstName = firstName;
    }
    
    public String getLastName(){
        return lastName;
    }
    
    public void setLastName(String lastName){
        this.lastName = lastName;
    }
    
    public Integer getHoursPerWeek(){
        return hoursPerWeek;
    }
    
    public void setHoursPerWeek(Integer hoursPerWeek){
        this.hoursPerWeek = hoursPerWeek;
    }
    
    public Double getWage(){
        return wage;
    }
    
    public void setWage(Double wage){
        this.wage = wage;
    }
    
    // Get the employee's weekly cost by multiplying wage by hours
    public Double getWeeklyCost(){
        return wage*hoursPerWeek;
    }
    
    // Get all employees in the database
    public static List<Employee> getAll(){
        List<Employee> employees = (List<Employee>) execute((Connection connection) -> {
            // HQL query to unconditionally select rows from the employee (entity Employee) table
            String queryString = "select e from Employee e";
            // Turn string into actionable query
            TypedQuery<Employee> query = connection.em.createQuery(queryString, Employee.class);
            
            // Return all records found (this is passed to and returned by execute)
            return query.getResultList();
        });
        
        return employees;
    }
    
    // Object to group employees by hours worked per week
    public static class HourGroup {
        
        // Cost of all employees in this group
        private Double totalCost = 0.0;
        // Lowest wage of all employees in this group
        private Double minWage = -1.0;
        // Highest wage of all employees in this group
        private Double maxWage = -1.0;
        
        // Hours per week defining this group
        private Integer hours;
        // Number of employees in this group
        private int numberOfEmployees = 0;
        
        // Getter and setter methods for class attributes
        
        // Rounds the total cost to 2 decimal places
        public Double getTotalCost(){
            return Math.round(totalCost*100.0)/100.0;
        }
        
        public void setTotalCost(Double totalCost){
            this.totalCost = totalCost;
        }
        
        // Rounds minimum wage to 2 decimal places
        public Double getMinWage(){
            return Math.round(minWage*100.0)/100.0;
        }
        
        public void setMinWage(Double minWage){
            this.minWage = minWage;
        }
        
        // Rounds minimum wage to 2 decimal places
        public Double getMaxWage(){
            return Math.round(maxWage*100.0)/100.0;
        }
        
        public void setMaxWage(Double maxWage){
            this.maxWage = maxWage;
        }
        
        public Integer getHours(){
            return hours;
        }
        
        public void setHours(Integer hours){
            this.hours = hours;
        }
        
        public int getNumberOfEmployees(){
            return numberOfEmployees;
        }
        
        public void setNumberOfEmployees(int numberOfEmployees){
            this.numberOfEmployees = numberOfEmployees;
        }
        
        // Modify group statistics to incorporate a new employee
        public void addEmployee(Employee employee){
            /* Set minimum wage to this employee's wage if it is below the current value
            (and minimum wage is not the initial value of -1) */
            if(employee.wage < minWage || minWage < 0){
                minWage = employee.wage;
            }
            // Set maximum wage to this employee's wage if it is above the current value
            if(employee.wage > maxWage){
                maxWage = employee.wage;
            }
            
            // Add to the total number of employees
            numberOfEmployees++;
            // Add this employee's weekly cost to the total
            totalCost += employee.getWeeklyCost();
        }
        
        // Initialize HourGroup with a set number of weekly hours (all other data is added with addEmployee)
        public HourGroup(Integer hours){
            this.hours = hours;
        }
        
    }
    
    // Default constructor (needed for JPA)
    public Employee(){  }
    
    // Initialize employee using name and schedule information
    public Employee(String firstName, String lastName, Integer hoursPerWeek, Double wage){
        setFirstName(firstName);
        setLastName(lastName);
        setHoursPerWeek(hoursPerWeek);
        setWage(wage);
    }
    
}
